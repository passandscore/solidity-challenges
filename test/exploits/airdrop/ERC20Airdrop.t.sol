// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import "forge-std/Test.sol";
import "src/exploits/airdrop/ERC20Airdrop.sol";

contract ERC20AirdropTest is Test {
    ERC20Airdrop erc20Airdrop;
    address user = 0x5721fDF72E2E2F8B612e0ff35D58c6050fb9D614;
    uint256 amount = 5000000000000000000000;
    address attacker = vm.addr(1);

    function setUp() public {
        erc20Airdrop = new ERC20Airdrop(address(this));
        erc20Airdrop.mint(address(this), 1_000_000e18);
    }

    function _getProof() private pure returns (bytes32[] memory) {
        bytes32[] memory proof = new bytes32[](3);
        proof[0] = 0xb4d176db215163c4127da72dbb535fbc930ee0805b9f0cf2898ed2eac8f8034d;
        proof[1] = 0xf04aa31f9896bd14358e425bcd2c72194a7303d2345cc84d7d571fc31a19e3a5;
        proof[2] = 0x92651724829843bc766e5d1dbd3a3ae2d323de0d6044e981c0a471473078e290;
        return proof;
    }

    function testSuccessfulClaim() public {
        vm.startPrank(user);

        bytes32[] memory proof = _getProof();
        erc20Airdrop.claimAirdrop(user, user, amount, proof);

        assertEq(erc20Airdrop.balanceOf(user), amount);
    }

    function testExploitedClaim() public {
        vm.startPrank(attacker);
        
        bytes32[] memory proof = _getProof();

        /* 

        Write exploit code here

        */

        // DO NOT REMOVE THIS LINE
        assertTrue(erc20Airdrop.balanceOf(attacker) > (amount * 5));
    }
}
